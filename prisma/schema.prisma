// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum FollowStatus {
  PENDING
  ACCEPTED
  DECLINED
  BLOCKED
}

enum MediaType {
  IMAGE
  VIDEO
}

enum PostKind {
  POST
  REPOST
  QUOTE
}

model User {
  id             String    @id @default(cuid())
  name           String?
  username       String    @unique
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  bio            String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  posts          Post[]
  comments       Comment[]
  likes          Like[]
  followers      Follow[]  @relation("userFollowers")
  following      Follow[]  @relation("userFollowing")

  // NextAuth relations
  accounts       Account[]
  sessions       Session[]
}

model Follow {
  id            String        @id @default(cuid())
  follower      User          @relation("userFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  followerId    String
  following     User          @relation("userFollowers", fields: [followingId], references: [id], onDelete: Cascade)
  followingId   String
  status        FollowStatus  @default(PENDING)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@unique([followerId, followingId])
  @@index([followingId, status])
  @@index([followerId, status])
}

model Post {
  id             String      @id @default(cuid())
  author         User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId       String
  content        String?
  kind           PostKind    @default(POST)
  originalPost   Post?       @relation("Repost", fields: [originalPostId], references: [id])
  originalPostId String?
  reposts        Post[]      @relation("Repost")
  media          PostMedia[]
  likes          Like[]
  comments       Comment[]
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  @@index([createdAt])
  @@index([authorId, createdAt])
}

model PostMedia {
  id        String    @id @default(cuid())
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  type      MediaType
  url       String
  width     Int?
  height    Int?
  duration  Int?
  createdAt DateTime  @default(now())
}

model Like {
  id        String   @id @default(cuid())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())

  @@unique([postId, userId])
  @@index([userId])
}

model Comment {
  id        String    @id @default(cuid())
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  content   String
  parent    Comment?  @relation("CommentToComment", fields: [parentId], references: [id])
  parentId  String?
  children  Comment[] @relation("CommentToComment")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([postId, createdAt])
}

// NextAuth.js models
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
